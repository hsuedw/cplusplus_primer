Assuming that iter is a vector<string>::iterator, indicate which, if any, of 
the following expressions are legal. Explain the behavior of the legal 
expressions and why those that aren't legal are in error.

(a) *iter++;
    Because the precedence of the postfix increment operator is higher than 
    the dereference operator, theis expression is equivalent to *(iter++). 
    Therefore, this expression means to fetch (dereference) the string
    to which iter refers and the advances iter to the next string in the 
    vector. Although this expression is legal, to avoid runtime error,I 
    think the programmer should check whether iter is in the valid range 
    of the vector before this expression.

(b) (*iter)++;
    This expresssion fetchs (dereference) the string to which iter refers and
    tries to perform an increment operation on this string. However, there is
    neither prefix nor postfix increment operator in string. Therefore, this
    expression is illegal.

(c) *iter.empty();
    Because the precedence of the (dot) member access operator is higher than 
    the dereference operator, this expression is equivalent to *(iter.empty()).
    However, iterator has no empty() member so this expression is illegal.

(d) iter->empty();
    This expression uses the (arror) member access operator to fetch the 
    empty() member of the string to which iter refers. Because iter refers 
    to a string in vector and string has empty() member, this expression 
    is valid. However, if iter is not in the valid range of the vector, there
    could be runtime error.

(e) ++*iter;
    This expression equivalent to ++(*iter). This expression fetches
    (dereferences) the string to which iter refers and tries to apply prefix
    increment operator on the string. Because string doesn't have prefix
    increment operator, this expression is illegal.

(f) iter++->empty();
    This expression equivalent to (iter++)->empty(). Because the programmer
    uses postfix increment operator, this expression fetches the empty() 
    member of the string to which iter refers and advances iter to the next 
    string. Therefore, this expression is legal. However, to avoid runtime
    error, the programmer should check if iter is in the valid range of the 
    vector first.
