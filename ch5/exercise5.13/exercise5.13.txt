Each of the programs in the highlighed text on page 184 contains a common
programming error. Identify and correct each error.

(a) Unsigned aCnt = 0, eCnt = 0, iouCnt = 0;
    char ch = next_text();
    switch (ch) {
        case 'a': aCnt++;
        case 'e': eCnt++;
        default: iouCnt++;
    }

    A break; statement should be added in each case branch, so I would like
    to fix the program in the following way.

    Unsigned aCnt = 0, eCnt = 0, iouCnt = 0;
    char ch = next_text();
    switch (ch) {
        case 'a':
            aCnt++;
            break;
        case 'e':
            eCnt++;
            break;
        default:
            iouCnt++;
            break;
    }

(b) unsigned index = some_value();
    switch (index) {
        case 1:
            int ix = get_value();
            ivec[ ix ] = index;
            break;
        default:
            ix = ivec.size()-1;
            ivec[ ix ] = index;
    }

    In the case 1: branch, a variable, ix, is defined and initialized. If the
    value of index is not 1, the default branch will be execulated and the ix
    will not be initialized. I would fix the program in the following way.

    int ix;
    unsigned index = some_value();
    switch (index) {
        case 1:
            ix = get_value();
            ivec[ ix ] = index;
            break;
        default:
            ix = ivec.size()-1;
            ivec[ ix ] = index;
    }

(c) unsigned evenCnt = 0, oddCnt = 0;
    int digit = get_num() % 10;
    switch (digit) {
        case 1, 3, 5, 7, 9:
            ++oddCnt;
            break;
        case 2, 4, 6, 8, 10:
            ++evenCnt;
            break;
    }

    Case labels must have only one integral constant value, so I would like
    to fix the program in the following way.

    unsigned evenCnt = 0, oddCnt = 0;
    int digit = get_num() % 10;
    switch (digit) {
        case 1:
        case 3:
        case 5:
        case 7:
        case 9:
            ++oddCnt;
            break;
        case 2:
        case 4:
        case 6:
        case 8:
        case 10:
            ++evenCnt;
            break;
    }

(d) unsigned ival=512, jval=1024, kval=4096;
    unsigned bufsize;
    unsigned swt = get_bufCnt();
    switch(swt) {
        case ival:
            bufsize = ival * sizeof(int);
            break;
        case jval:
            bufsize = jval * sizeof(int);
            break;
        case kval:
            bufsize = kval * sizeof(int);
            break;
    }

    Case labels must be integral constant expressions, so I would like to fix
    the program in the following way.

    constexpr unsigned ival=512, jval=1024, kval=4096;
    unsigned bufsize;
    unsigned swt = get_bufCnt();
    switch(swt) {
        case ival:
            bufsize = ival * sizeof(int);
            break;
        case jval:
            bufsize = jval * sizeof(int);
            break;
        case kval:
            bufsize = kval * sizeof(int);
            break;
    }

